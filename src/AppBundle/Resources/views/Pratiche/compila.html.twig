{% extends '@App/Default/index.html.twig' %}

{% set ente = instance_service.getCurrentInstance() %}

{% block stylesheets %}
  {{ parent() }}
  {{ encore_entry_link_tags('compile') }}
  <link rel="stylesheet" href="https://unpkg.com/element-ui@1.4.13/lib/theme-default/index.css">
  <style>
    .callout .body p {
      font-family: "Titillium Web", Geneva, Tahoma, sans-serif !important;
    }
  </style>
{% endblock %}

{% block javascripts %}
  {{ parent() }}
  {{ encore_entry_script_tags('compile') }}

  <script src="//cdnjs.cloudflare.com/ajax/libs/vue/2.2.6/vue.min.js"></script>
  <script src="//unpkg.com/element-ui@1.4.13/lib/index.js"></script>
  <script src="//unpkg.com/axios/dist/axios.min.js"></script>
  <script src="{{ asset('bundles/app/js/jsrender.min.js') }}"></script>
  <script src="{{ asset('bundles/app/js/formio-i18n.js') }}"></script>
  {% if form.vars.helper.vueApp %}
    <script src="{{ asset('bundles/app/js/components/' ~ form.vars.helper.vueApp ~ '.js') }}"></script>
    <script>
      let vueBundledData = {{ form.vars.helper.vueBundledData|raw }};
      new Vue({
        el: "#vueApp"
      });
    </script>
  {% endif %}
  <script>
    new Vue({
      el: "#compilationNotes",
      data: {
        compilationNotes: null,
        endpointUrl: '{% if endpoint_prefix is defined %}/{{ endpoint_prefix }}{% endif %}/api/v1.0/user/{{ form.vars.data.id }}/notes'
      },
      created: function () {
        var self = this;
        axios.get(this.endpointUrl)
          .then(function (res) {
            if (res.data) {
              self.compilationNotes = res.data;
            }
          })
      },
      methods: {
        onSave: function () {
          axios.post(this.endpointUrl, this.compilationNotes)
        }
      }
    })
  </script>

  <script src="https://code.jquery.com/jquery-3.4.1.min.js"
          integrity="sha256-CSXorXvZcTkaix6Yvo6HppcZGetbYMGWSFlBw8HfCJo="
          crossorigin="anonymous"></script>
  <script>
    $(document).ready(function () {
      let formIoIdInput = $('#formio_render_form_id');

      if (formIoIdInput.length) {
        let customErrorContainer = $('#formio-custom-errors');

        // Nascondo input symfony, trovare modo di fare submit di formio da esterno
        $('.craue_formflow_buttons').addClass('d-none');

        Formio.icons = 'fontawesome';
        Formio.createForm(document.getElementById('formio'), $('#formio').data('formserver_url') + '/form/' + formIoIdInput.val(), {
          noAlerts: true,
          language: 'it',
          i18n: formIoI18n,
          buttonSettings: {
            showCancel: false
          }
        }).then(function (form) {
          form.formReady.then(() => {
            setTimeout(disableApplicant, 1000);

            const draftButton =  $('.btn-wizard-nav-submit, #save-draft');
            const draftInfo = $('.save-draft-info');
            const draftTextInfo = draftInfo.find('span');
            if (draftButton.length) {
              draftButton.parent().removeClass('d-none');
              draftButton.on('click', function (e) {
                e.preventDefault();
                let text = draftButton.html();
                draftButton.html('<i class="fa fa-circle-o-notch fa-spin fa-fw"></i> Salvataggio in corso...')
                axios.post(draftButton.data('save-draft-url'), form.submission.data)
                  .then(function (reponse) {
                    draftInfo.removeClass('d-none');
                    draftTextInfo.text('pochi secondi fa')
                  })
                  .catch(function (error) {
                    draftInfo.removeClass('d-none');
                    draftTextInfo.text('si Ã¨ verificato un errore durante il salvataggio')
                  })
                  .then(function () {
                    draftButton.html(text)
                  });
              });
            }

          });

          if (form.hasOwnProperty('wizard')) {
            $('.craue_formflow_current_step.active').addClass('wizard');
          }

          let dataContainer = $('#formio_render_dematerialized_forms');

          // Recupero i dati della pratica se presenti
          if (dataContainer.val() !== '') {
            form.submission = {
              data: JSON.parse(dataContainer.val()).data
            };
          }

          form.on('nextPage', function () {
            document.getElementById("formio").scrollIntoView();
          });

          form.on('prevPage', function () {
            setTimeout(disableApplicant, 1000);
          });

            $('.btn-wizard-nav-cancel').on('click', function (e) {
                e.preventDefault()
                location.reload();
            })

          let realSubmitButton = $('.craue_formflow_button_class_next');
          form.nosubmit = true;

          // Triggered when they click the submit button.
          form.on('submit', function (submission) {
            let submitButton = $('#formio button');
            submitButton.hide();
            $('<a href="#" id="loading-button" class="btn btn-secondary"><i class="fas fa-sync fa-spin"></i> Attendere...</a>').insertAfter(submitButton.last());
            customErrorContainer.empty().hide();
            axios.post('{{ path( 'formio_validate', {'servizio': pratica.servizio.slug}) }}', JSON.stringify(submission.data))
              .then(function (reponse) {
                customErrorContainer.empty();
                let submitErrors = null;
                if (reponse.data.errors) {
                  reponse.data.errors.forEach((error) => {
                    customErrorContainer.append('<p class="m-0">' + error.toString() + '</p>');
                  });
                  customErrorContainer.show();
                  $('#formio #loading-button').remove();
                  submitButton.show();
                }else{
                  form.emit('submitDone', submission)
                  let data = $('form[name="formio_render"]').serialize();
                  dataContainer.val(JSON.stringify(submission.data));
                  realSubmitButton.trigger('click');
                }
              });
          });
        });
        autoCloseAlert(customErrorContainer)
      }

      //Funzione per rendere il form Applicant readOnly
      const disableApplicant = function () {
          $('.formio-component-applicant input').each(function (k) {
            if($(this).closest(".formio-component-address").length <= 0) {
              if ($(this).prop("type") === "radio") {
                let name = $(this).prop('name');
                if ($(this).prop("checked")) {
                  $("input[name='" + name + "']").attr('disabled', 'disabled');
                }
              } else if ($(this).val()) {
                $(this).attr('disabled', 'disabled');
              }
            }
          });
        }
    });

    function autoCloseAlert(customErrorContainer){
      if(customErrorContainer && customErrorContainer.length > 0){
        customErrorContainer.each(function() {
          var time_period = customErrorContainer.attr('auto-close');
          setTimeout(function() {
            customErrorContainer.empty().hide();
          }, time_period);
        });
      }
    }
  </script>

{% endblock %}

{% block main_content %}
  {% form_theme form ':form:ocsdc_form_style.html.twig' %}

  <section class="container {{ form.vars.id }}">
    <div class="row">
      <div class="col-lg-12 px-lg-4 py-lg-2">
        {% if pratica.statusName == 'STATUS_DRAFT_FOR_INTEGRATION' %}
          <h1>{{ 'pratica.integrazione_pratica'|trans({'%name%':pratica.servizio.name}) }}</h1>
          <small>{{ 'pratica.integrazione_pratica_description'|trans() }}</small>
          {% if pratica.haUnaRichiestaDiIntegrazioneAttiva and pratica.getRichiestaDiIntegrazioneAttiva is not null %}
            {% set download_allegato_path = user.id == pratica.user.id ? 'allegati_download_cpsuser' : 'allegati_download_operatore' %}
            <div class="alert alert-warning">
              {{ pratica.getRichiestaDiIntegrazioneAttiva.description }}
              (
              <small>
                <a
                  href="{{ path( download_allegato_path, {'allegato': pratica.getRichiestaDiIntegrazioneAttiva.id}) }}">{{ 'allegato.scarica_allegato_richiesta_integrazione'|trans }}</a>
              </small>
              )
            </div>
          {% endif %}
        {% else %}
          <h1>{{ pratica.servizio.name }}</h1>
        {% endif %}
      </div>
    </div>

    {% if pratica.servizio.legacy %}
      <div class="row">
        <div class="col-lg-12 px-lg-4">
          <h4 class="mb-5">
            {{ 'pratica.passo_uno_di_tanti'|trans({'%current%':flow.getCurrentStepNumber(),'%total%':flow.stepCount}) }}
            -
            {% if form.vars.helper.stepTitle|length > 0 %}
              {{ form.vars.helper.stepTitle }}
            {% else %}
              {{ flow.currentStepLabel()|trans }}
            {% endif %}
          </h4>
        </div>
      </div>
    {% endif %}

    <div class="row hidden-xs">
      <div class="col-md-12 mt-4 mb-4">
        {% include 'CraueFormFlowBundle:FormFlow:stepList.html.twig' %}
      </div>
    </div>

    <div class="row mt-2">
      <div class="col-lg-8 px-lg-4">
        {{ form_start(form, {'action': path('pratiche_compila', {'pratica': pratica.id }) } ) }}
        <div class="step-{{ flow.getCurrentStepNumber() }}">
          {{ form_errors(form) }}

          {% if form.vars.helper.descriptionText|length > 0 %}
            {{ form.vars.helper.descriptionText|raw }}
          {% endif %}

          {% set currentStep = flow.steps[flow.getCurrentStepNumber() - 1] %}

          {% if currentStep.formType == "AppBundle\\Form\\Base\\SummaryType" %}
            <p>Verifica i dati inseriti prima di passare al metodo di pagamento</p>
            {{ include('AppBundle:Pratiche/parts:pratica_summary.html.twig', {'pratica':form.vars.data, 'user': user}) }}
          {% elseif  flow.getCurrentStepNumber() == flow.getLastStepNumber() %}
            <p><b>{{ 'steps.common.conferma.help_text_top'|trans }}</b></p>
            {{ include('AppBundle:Pratiche/parts:pratica_summary.html.twig', {'pratica':form.vars.data, 'user': user}) }}
          {% endif %}
          {{ form_rest(form) }}

          <div id="vueApp">
            {% if form.vars.helper.vueApp %}
            <{{ form.vars.helper.vueApp }}></{{ form.vars.helper.vueApp }}>
            {% endif %}
          </div>
        </div>

        <div id="formio" class="formio-front" data-formserver_url="{{ formserver_url }}"></div>

        <div id="formio-custom-errors" class="alert alert-danger alert-dismissible" style="display: none" role="alert" auto-close="5000">
          <button type="button" class="close" data-dismiss="alert" aria-label="Close">
            <span aria-hidden="true">&times;</span>
          </button>
        </div>

        {% if form.vars.id != 'pratica_payment_gateway' or (form.vars.id == 'pratica_payment_gateway' and form.vars.value.paymentType.identifier != 'mypay') %}
          <div class="mt-5">
            {% include 'CraueFormFlowBundle:FormFlow:buttons.html.twig' %}
          </div>
        {% endif %}

        {{ form_end(form) }}
      </div>

      <div class="col-lg-4 pt-5 pt-lg-2">
        {% if form.vars.helper.guideText|length > 0 %}
          <div class="callout">
            <div class="callout-title">
              <svg class="icon">
                <use xlink:href="/bootstrap-italia/dist/svg/sprite.svg#it-info-circle"></use>
              </svg>
              {{ 'pratica.guida_utente'|trans }}
            </div>
            <div class="body">
              <p>{{ form.vars.helper.guideText|raw }}</p>
            </div>
          </div>
        {% endif %}

        {% if is_granted('ROLE_USER') %}
          <div class="d-none" id="save-draft-container">
            <button id="save-draft" class="btn btn-outline-primary w-100" data-save-draft-url="{{ path('pratiche_draft', {'pratica': pratica}) }}">
              <i class="fa fa-floppy-o" aria-hidden="true"></i> {{ 'buttons.draft'|trans }}
            </button>
            <small class="save-draft-info w-100 mt-1 text-center text-info {% if pratica.dematerializedForms is not defined or pratica.dematerializedForms|length <= 0 %}d-none{% endif %}"><i class="fa fa-clock-o" aria-hidden="true"></i> {{ 'buttons.last_save'|trans }} <span>{{ pratica.updatedAt|date('U')|time_ago }}</span></small>
          </div>
        {% endif %}

        {# Info compilazione specificate nel servizio #}
        {{ include('AppBundle:Pratiche/parts:compilation_info.html.twig') }}

        {# Note compilazione per utente #}
        {{ include('AppBundle:Pratiche/parts:user_compilation_notes.html.twig') }}

        {#{% if threads and flow.getCurrentStepNumber() >= 2 %}
            {{ include('@App/Default/parts/chat.html.twig') }}
        {% endif %}#}
      </div>
    </div>
  </section>

  {# Modal di conferma #}
  {{ include('AppBundle:Pratiche/parts:confirm_modal.html.twig') }}

{% endblock %}


{#{%- block checkbox_widget -%}
    <input type="checkbox"
           data-group-cls="btn-group-lg" {{ block('widget_attributes') }}{% if value is defined %} value="{{ value }}"{% endif %}{% if checked %} checked="checked"{% endif %} />
{%- endblock checkbox_widget -%}#}
