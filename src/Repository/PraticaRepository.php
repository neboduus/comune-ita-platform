<?php

namespace App\Repository;

use App\Entity\CPSUser;
use App\Entity\Ente;
use App\Entity\OperatoreUser;
use App\Entity\Pratica;
use Doctrine\ORM\EntityRepository;
use Symfony\Component\Security\Core\User\UserInterface;

/**
 * PraticaRepository
 *
 * This class was generated by the PhpStorm "Php Annotations" Plugin. Add your own custom
 * repository methods below.
 *
 * @method Ente|null findOneBySlug()
 */
class PraticaRepository extends EntityRepository
{
    /**
     * @param UserInterface $user
     * @return Pratica[]
     * @throws \Doctrine\DBAL\DBALException
     */
    public function findRelatedPraticaForUser(UserInterface $user)
    {
        if (!$user instanceof CPSUser) {
            return [];
        }

        //@todo make query in dql
        $sql = 'SELECT id from pratica where (related_cfs)::jsonb @> \'"' . $user->getCodiceFiscale() . '"\'';
        $stmt = $this->getEntityManager()->getConnection()->prepare($sql);
        $stmt->execute();
        $result = $stmt->fetchAll();

        $ids = [];

        foreach ($result as $id) {
            $ids[] = $id['id'];
        }

        return $this->findById($ids);
    }

    /**
     * @param UserInterface $user
     * @return Pratica[]
     */
    public function findDraftPraticaForUser(UserInterface $user)
    {
        return $this->findBy(
            [
                'user' => $user,
                'status' => Pratica::STATUS_DRAFT,
            ],
            [
                'creationTime' => 'DESC',
            ]
        );
    }

    /**
     * @param UserInterface $user
     * @return Pratica[]
     */
    public function findPendingPraticaForUser(UserInterface $user)
    {
        return $this->findBy(
            [
                'user' => $user,
                'status' => [
                    Pratica::STATUS_SUBMITTED,
                    Pratica::STATUS_PRE_SUBMIT,
                    Pratica::STATUS_REGISTERED,
                    Pratica::STATUS_PENDING,
                    Pratica::STATUS_PENDING_AFTER_INTEGRATION,
                    Pratica::STATUS_COMPLETE_WAITALLEGATIOPERATORE,
                    Pratica::STATUS_REQUEST_INTEGRATION,
                    Pratica::STATUS_REGISTERED_AFTER_INTEGRATION,
                    Pratica::STATUS_CANCELLED_WAITALLEGATIOPERATORE,
                ],
            ],
            [
                'creationTime' => 'DESC',
            ]
        );
    }

    /**
     * @param UserInterface $user
     * @return Pratica[]
     */
    public function findProcessingPraticaForUser(UserInterface $user)
    {
        return $this->findBy(
            [
                'user' => $user,
                'status' => Pratica::STATUS_PROCESSING,
            ],
            [
                'creationTime' => 'DESC',
            ]
        );
    }

    /**
     * @param UserInterface $user
     * @return Pratica[]
     */
    public function findCompletePraticaForUser(UserInterface $user)
    {
        return $this->findBy(
            [
                'user' => $user,
                'status' => Pratica::STATUS_COMPLETE,
            ],
            [
                'creationTime' => 'DESC',
            ]
        );
    }

    /**
     * @param UserInterface $user
     * @return Pratica[]
     */
    public function findCancelledPraticaForUser(UserInterface $user)
    {
        return $this->findBy(
            [
                'user' => $user,
                'status' => [
                    Pratica::STATUS_CANCELLED,
                ],
            ],
            [
                'creationTime' => 'DESC',
            ]
        );
    }

    /**
     * @param UserInterface $user
     * @return Pratica[]
     */
    public function findDraftForIntegrationPraticaForUser(UserInterface $user)
    {
        return $this->findBy(
            [
                'user' => $user,
                'status' => [
                    Pratica::STATUS_DRAFT_FOR_INTEGRATION,
                    Pratica::STATUS_SUBMITTED_AFTER_INTEGRATION,
                ],
            ],
            [
                'creationTime' => 'DESC',
            ]
        );
    }

    /**
     * @param OperatoreUser $user
     * @return Pratica[]
     */
    public function findPraticheAssignedToOperatore(OperatoreUser $user)
    {
        $ente = $user->getEnte();
        return $this->findBy(
            [
                'operatore' => $user,
                'erogatore' => $ente->getErogatori()->toArray(),
                'status' => [
                    Pratica::STATUS_PENDING,
                    Pratica::STATUS_PENDING_AFTER_INTEGRATION,
                    Pratica::STATUS_PROCESSING,
                    Pratica::STATUS_SUBMITTED,
                    Pratica::STATUS_REGISTERED,
                ],
            ]
        );
    }

    /**
     * @param Ente $ente
     * @return Pratica[]
     */
    public function findPraticheByEnte(Ente $ente)
    {
        return $this->findBy(
            [
                'erogatore' => $ente->getErogatori()->toArray(),
            ]
        );
    }

    /**
     * @param Ente $ente
     * @return Pratica[]
     */
    public function findSubmittedPraticheByEnte(Ente $ente)
    {
        $qb = $this->createQueryBuilder('p');
        $qb->where('p.status >= ' . Pratica::STATUS_SUBMITTED)
            ->andWhere('p.ente = :ente')
            ->setParameter('ente', $ente);


        return $qb->getQuery()->getResult();
    }

    /**
     * @param Ente $ente
     * @return Pratica[]
     */
    public function findPraticheUnAssignedByEnte(Ente $ente)
    {
        return $this->findBy(
            [
                'operatore' => null,
                'erogatore' => $ente->getErogatori()->toArray(),
                'status' => [
                    Pratica::STATUS_PENDING,
                    Pratica::STATUS_SUBMITTED,
                    Pratica::STATUS_REGISTERED,
                    Pratica::STATUS_PROCESSING,
                ],
            ]
        );
    }

    /**
     * @param OperatoreUser $user
     * @return Pratica[]
     */
    public function findPraticheCompletedByOperatore(OperatoreUser $user)
    {
        $ente = $user->getEnte();
        return $this->findBy(
            [
                'operatore' => $user,
                'erogatore' => $ente->getErogatori()->toArray(),
                'status' => [
                    Pratica::STATUS_COMPLETE,
                    Pratica::STATUS_COMPLETE_WAITALLEGATIOPERATORE,
                    Pratica::STATUS_CANCELLED_WAITALLEGATIOPERATORE,
                    Pratica::STATUS_CANCELLED,
                ]
            ]
        );
    }
}
