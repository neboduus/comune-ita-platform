{% extends '@App/Default/index.html.twig' %}

{% block stylesheets %}
  {{ parent() }}
  <link rel="stylesheet" type="text/css" href="https://cdn.datatables.net/w/bs4/dt-1.10.18/datatables.min.css"/>
  <link rel="stylesheet" type="text/css" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.11.2/css/all.css">
{% endblock %}

{% block javascripts %}
  {{ parent() }}
  <script type="text/javascript" src="https://code.jquery.com/jquery-3.3.1.js"></script>
  <script type="text/javascript" src="https://cdn.datatables.net/1.10.20/js/jquery.dataTables.min.js"></script>
  <script type="text/javascript" src="https://cdn.datatables.net/1.10.20/js/dataTables.bootstrap4.min.js"></script>
  <script type="text/javascript" src="https://cdn.datatables.net/v/dt/jq-3.2.1/dt-1.10.16/datatables.min.js"></script>
  <script type="text/javascript" src="https://cdn.datatables.net/buttons/1.6.1/js/dataTables.buttons.min.js"></script>
  <script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/jszip/3.1.3/jszip.min.js"></script>
  <script type="text/javascript" src="https://cdn.datatables.net/buttons/1.6.1/js/buttons.html5.min.js"></script>
  <script type="text/javascript" src="https://cdn.datatables.net/buttons/1.6.1/js/dataTables.buttons.min.js"></script>
  <script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/pdfmake/0.1.53/pdfmake.min.js"></script>
  <script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/pdfmake/0.1.53/vfs_fonts.js"></script>
  <script type="text/javascript" src="https://cdn.datatables.net/buttons/1.6.1/js/buttons.print.min.js"></script>
  <script type="text/javascript" src="https://cdn.datatables.net/buttons/1.6.1/js/buttons.flash.min.js"></script>
  <script src="{{ asset('bundles/datatables/js/datatables.js') }}"></script>

  <script>
    var oldExportAction = function (self, e, dt, button, config) {
      if (button[0].className.indexOf('buttons-excel') >= 0) {
        if ($.fn.dataTable.ext.buttons.excelHtml5.available(dt, config)) {
          $.fn.dataTable.ext.buttons.excelHtml5.action.call(self, e, dt, button, config);
        } else {
          $.fn.dataTable.ext.buttons.excelFlash.action.call(self, e, dt, button, config);
        }
      } else if (button[0].className.indexOf('buttons-csv') >= 0) {
        if ($.fn.dataTable.ext.buttons.csvHtml5.available(dt, config)) {
          $.fn.dataTable.ext.buttons.csvHtml5.action.call(self, e, dt, button, config);
        } else {
          $.fn.dataTable.ext.buttons.csvFlash.action.call(self, e, dt, button, config);
        }
      } else if (button[0].className.indexOf('buttons-print') >= 0) {
        $.fn.dataTable.ext.buttons.print.action(e, dt, button, config);
      } else if ((button[0].className.indexOf('buttons-pdf') >= 0)) {
        if ($.fn.dataTable.ext.buttons.pdfHtml5.available(dt, config)) {
          $.fn.dataTable.ext.buttons.pdfHtml5.action.call(self, e, dt, button, config);
        } else {
          $.fn.dataTable.ext.buttons.pdfFlash.action.call(self, e, dt, button, config);
        }
      }
    };

    var newExportAction = function (e, dt, button, config) {
      var self = this;
      var oldStart = dt.settings()[0]._iDisplayStart;

      dt.one('preXhr', function (e, s, data) {
        // Just this once, load all data from the server...
        data.start = 0;
        data.length = 2147483647;

        dt.one('preDraw', function (e, settings) {
          // Call the original action function
          oldExportAction(self, e, dt, button, config);

          dt.one('preXhr', function (e, s, data) {
            // DataTables thinks the first item displayed is index 0, but we're not drawing that.
            // Set the property to what it was before exporting.
            settings._iDisplayStart = oldStart;
            data.start = oldStart;
          });

          // Reload the grid with the original page. Otherwise, API functions like table.cell(this) don't work properly.
          setTimeout(dt.ajax.reload, 0);

          // Prevent rendering of the full data to the DOM
          return false;
        });
      });

      // Requery the server with the new one-time export settings
      dt.ajax.reload();
    };

    // Upload Editor - triggered from the import button. Used only for uploading a file to the browser

    $(function () {
      $('#subscriptions').initDataTables({{ datatable_settings(datatable) }}, {
        dom: 'fBrtip',
        searching: true,
        paging: true,
        pagingType: 'simple_numbers',
        buttons: [
          {
            extend: 'excel',
            text: '<i class="fas fa-file-excel"></i><span class="d-none d-xl-inline-block">&nbsp Esporta Excel</span>',
            title: 'Iscrizioni',
            action: newExportAction,
            className: 'btn btn-sm btn-secondary'
          },
          {
            extend: 'csv',
            text: '<i class="fas fa-file-csv"></i><span class="d-none d-xl-inline-block">&nbsp Esporta CSV</span>',
            title: 'Iscrizioni',
            action: newExportAction,
            className: 'btn btn-sm btn-secondary'
          },
          {
            extend: 'pdf',
            text: '<i class="fas fa-file-pdf"></i><span class="d-none d-xl-inline-block">&nbsp Esporta PDF</span>',
            title: 'Iscrizioni',
            pageSize: 'LEGAL',
            action: newExportAction,
            className: 'btn btn-sm btn-secondary'
          },
          {
            extend: 'print',
            text: '<i class="fas fa-print"></i><span class="d-none d-xl-inline-block">&nbsp Stampa</span>',
            title: 'Iscrizioni',
            action: newExportAction,
            className: 'btn btn-sm btn-secondary'
          }
        ],
        "language": {
          "sEmptyTable": "Nessun dato presente nella tabella",
          "sInfo": "Vista da _START_ a _END_ di _TOTAL_ elementi",
          "sInfoEmpty": "Vista da 0 a 0 di 0 elementi",
          "sInfoFiltered": "(filtrati da _MAX_ elementi totali)",
          "sInfoPostFix": "",
          "sInfoThousands": ".",
          "sLengthMenu": "Visualizza _MENU_ elementi",
          "sLoadingRecords": "Caricamento...",
          "sProcessing": '<div class="progress-spinner progress-spinner-double progress-spinner-active">\n' +
            '        <div class="progress-spinner-inner"></div>\n' +
            '        <div class="progress-spinner-inner"></div>\n' +
            '        <span class="sr-only">Caricamento...</span>\n' +
            '      </div>',
          "sSearch": "Ricerca",
          "sZeroRecords": "La ricerca non ha portato alcun risultato.",
          "oPaginate": {
            "sFirst": "Inizio",
            "sPrevious": "Precedente",
            "sNext": "Successivo",
            "sLast": "Fine"
          },
          "oAria": {
            "sSortAscending": ": attiva per ordinare la colonna in ordine crescente",
            "sSortDescending": ": attiva per ordinare la colonna in ordine decrescente"
          }
        },
        initComplete: function () {
          // Add data-title attribute
          $('#subscriptions thead tr th').each(function(index,element){
            index += 1;
            $('tr td:nth-child('+index+')').attr('data-title', element.innerHTML);
          });

          // Use bootstrap buttons for pagination
          $('a.paginate_button').addClass('btn');
          // Add margin bottom to datatables info
          $('#dt_info').css('margin-bottom', '0.85em')

          let inputForm = '<input type="file" id="file-input2" accept=".csv" class="upload"><label for="file-input2" class="pt-2 pb-2 pr-3 pl-3 bg-secondary" style="float: right;"><i class="fas fa-upload"></i><span class="d-none d-xl-inline-block">&nbsp Importa CSV</span></label>';
          $("div.dt-buttons").append(inputForm);
          $("#file-input2").on("change", function (e) {
            var fdata = new FormData();

            fdata.append("upload", this.files[0]);
            $.ajax({
              url: "{{ path('operatori_importa_csv_iscrizioni', { 'subscriptionService': subscriptionService.id }) }}",
              type: "post",
              data: fdata, //add the FormData object to the data parameter
              processData: false, //tell jquery not to process data
              contentType: false, //tell jquery not to set content-type
              success: function (response, status, jqxhr) {
                location.reload();
              },
              error: function (jqxhr) {
                // todo: manage error
                let errors = jqxhr.responseJSON.errors || [];
                errors.forEach(function (error) {
                  let inputForm = `<div class="alert alert-danger alert-dismissible fade show" role="alert">${error.error}
                                        <button type="button" class="close" data-dismiss="alert" aria-label="Close">
                                            <span aria-hidden="true">&times;</span>
                                        </button>
                                   </div>`;
                  $("#errors").append(inputForm);
                })
              }
            });
          });
        }
      }).then(function (dt) {
      })
    });
  </script>

{% endblock %}

{% block main_content %}
  <section id="intro" class="container px-4 my-4">
    <div id="errors"></div>
    <div class="row">
      <div class="col-lg-12 px-lg-4 py-lg-2">
        {#<nav class="breadcrumb-container" aria-label="breadcrumb">
          <ol class="breadcrumb">
            <li class="breadcrumb-item"><a href="{{ path('operatori_subscription-service_index') }}">Servizi a sottoscrizione</a></li>
            <li class="breadcrumb-item"><a href="{{ path('operatori_subscription-service_show', { 'subscriptionService': subscriptionService.id }) }}">{{ subscriptionService.name }}</a></li>
            <li class="breadcrumb-item active" aria-current="page">Iscritti</li>
          </ol>
        </nav>#}
        <h1> {{ subscriptionService.name }} / Iscritti</h1>
      </div>
      <!--form method="post" action="{{ path('operatori_importa_csv_iscrizioni', { 'subscriptionService': subscriptionService.id }) }}" enctype="multipart/form-data">
        <input name="upload" type="file" id="file" accept=".csv" class="upload">
        <label for="file" style="float: right; padding: 12px 24px">
          <svg class="icon icon-sm" aria-hidden="true">
            <use xlink:href="/bootstrap-italia/dist/svg/sprite.svg#it-upload"></use>
          </svg>
          <span>Importa CSV</span>
        </label>
        <button type="submit">Invia</button>
      </form-->

      <div class="col-lg-12 px-lg-4 py-lg-2 mt-4">
        <div id="no-more-tables" class="table-striped">
          <div id="subscriptions" style="margin: 10px"></div>
        </div>
      </div>
    </div>
    <div class="row">
      <div class="col-lg-12 px-lg-4 py-lg-2 mx-2 my-2">
        <a class="btn btn-100 mr-1 btn-sm"
           href="{{ path('operatori_subscription-service_show', { 'subscriptionService': subscriptionService.id }) }}">Torna
          al servizio</a>
        <a class="btn btn-100 btn-sm" href="{{ path('operatori_subscription-service_index') }}">Torna alla lista</a>
      </div>
    </div>
  </section>
{% endblock %}
