image: docker:latest

# build -> push -> delivery
stages:
  - build
  - test
  - build_apache
  - push

variables:
  DOCKER_BUILDKIT: 1
  PHP_IMAGE_NAME: "${CI_REGISTRY_IMAGE}/app"
  PHP_IMAGE_TMP: "${CI_REGISTRY_IMAGE}/app:${CI_COMMIT_SHORT_SHA}"
  APACHE_IMAGE_NAME: "${CI_REGISTRY_IMAGE}/apache"
  APACHE_IMAGE_TMP: "${CI_REGISTRY_IMAGE}/apache:${CI_COMMIT_SHORT_SHA}"

build_php:
  stage: build
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  script:
    - docker pull $PHP_IMAGE_NAME:latest || true
    - docker pull $PHP_IMAGE_TMP 2> /dev/null || docker build --pull --cache-from $PHP_IMAGE_NAME:latest -t $PHP_IMAGE_TMP --build-arg BUILDKIT_INLINE_CACHE=1 --build-arg CI_COMMIT_REF_NAME=$CI_COMMIT_REF_NAME --build-arg CI_COMMIT_TAG=$CI_COMMIT_TAG --build-arg CI_COMMIT_SHORT_SHA=$CI_COMMIT_SHORT_SHA .
    - docker push $PHP_IMAGE_TMP
  only:
    - branches
    - tags

build_apache:
  stage: build_apache
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  script:
    - docker pull $APACHE_IMAGE_NAME:latest || true
    - docker pull $APACHE_IMAGE_TMP 2> /dev/null || docker build --file Dockerfile.apache --pull --cache-from $APACHE_IMAGE_NAME:latest --build-arg php_image=$PHP_IMAGE_TMP -t $APACHE_IMAGE_TMP --build-arg BUILDKIT_INLINE_CACHE=1 .
    - docker push $APACHE_IMAGE_TMP
  only:
    - branches
    - tags





push_php_branch:
  stage: push
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  script:
    - docker pull $PHP_IMAGE_TMP
    - docker tag $PHP_IMAGE_TMP "$PHP_IMAGE_NAME:${CI_COMMIT_REF_NAME/\//-}"
    - docker push "$PHP_IMAGE_NAME:${CI_COMMIT_REF_NAME/\//-}"
  only:
    - branches
  except:
    - master

push_php_tag:
  stage: push
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  script:
    - docker pull $PHP_IMAGE_TMP
    - docker tag $PHP_IMAGE_TMP "$PHP_IMAGE_NAME:$CI_COMMIT_TAG"
    - docker push "$PHP_IMAGE_NAME:$CI_COMMIT_TAG"
  only:
    - tags

push_php_latest:
  stage: push
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  script:
    - docker pull $PHP_IMAGE_TMP
    - docker tag $PHP_IMAGE_TMP "$PHP_IMAGE_NAME:latest"
    - docker push "$PHP_IMAGE_NAME:latest"
  only:
    - master




push_apache_branch:
  stage: push
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  script:
    - docker pull $APACHE_IMAGE_TMP
    - docker tag $APACHE_IMAGE_TMP "$APACHE_IMAGE_NAME:${CI_COMMIT_REF_NAME/\//-}"
    - docker push "$APACHE_IMAGE_NAME:${CI_COMMIT_REF_NAME/\//-}"
  only:
    - branches
  except:
    - master

push_apache_tag:
  stage: push
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  script:
    - docker pull $APACHE_IMAGE_TMP
    - docker tag $APACHE_IMAGE_TMP "$APACHE_IMAGE_NAME:$CI_COMMIT_TAG"
    - docker push "$APACHE_IMAGE_NAME:$CI_COMMIT_TAG"
  only:
    - tags

push_apache_latest:
  stage: push
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  script:
    - docker pull $APACHE_IMAGE_TMP
    - docker tag $APACHE_IMAGE_TMP "$APACHE_IMAGE_NAME:latest"
    - docker push "$APACHE_IMAGE_NAME:latest"
  only:
    - master




#zap_baseline:
#  stage: test
#  allow_failure: true
#  script:
#    - docker run -v $(pwd):/zap/wrk/:rw -t owasp/zap2docker-stable zap-baseline.py -t https://devsdc.opencontent.it/comune-di-bugliano/
#    # -z -config rules.csrf.ignorelist=search,login then ZAP will not fail the scan if forms with an ID of "search" or "login" do not have anti CSRF tokens.
#    # - docker run -t owasp/zap2docker-stable zap-baseline.py -j -t https://10.0.1.22/ # with ajax scanning

publiccode:
    stage: test
    allow_failure: true
    script:
      - docker run -v $(pwd):/var/tmp:ro -t --rm golang sh -c "go get github.com/italia/publiccode-parser-go/pcvalidate; cd /var/tmp; /go/bin/pcvalidate -remote-base-url https://gitlab.com/opencontent/stanzadelcittadino/raw/master publiccode.yml"


dummy_protocol:
    stage: test
    allow_failure: false
    script:
      - echo "Looking for configuration files containing protocollo.handlers.dummy:"
      - find app/config -type f -name "config_prod.yml" -exec grep -H protocollo.handlers.dummy {} \;
      - if [[ $(find app/config -type f -name "config_prod.yml" -exec grep -H protocollo.handlers.dummy {} \; | wc -l) -gt 0 ]]; then echo "Error, at least one production file contains dummy protocol!" && exit 1; else echo "OK, no dummy protocol in production files"; fi

# vim: set noet sw=4 ts=4:

