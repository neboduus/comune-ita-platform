image: docker:latest

services:
  - docker:dind

# build -> push -> delivery
stages:
  - build
  - test
  - build_apache
  - push
  - renovate

variables:
  DOCKER_BUILDKIT: 1
  PHP_IMAGE_NAME: "${CI_REGISTRY_IMAGE}/app"
  PHP_IMAGE_TMP: "${CI_REGISTRY_IMAGE}/app:${CI_COMMIT_REF_SLUG}-${CI_COMMIT_SHORT_SHA}"
  APACHE_IMAGE_NAME: "${CI_REGISTRY_IMAGE}/apache"
  APACHE_IMAGE_TMP: "${CI_REGISTRY_IMAGE}/apache:${CI_COMMIT_REF_SLUG}-${CI_COMMIT_SHORT_SHA}"
  CADDY_IMAGE_NAME: "${CI_REGISTRY_IMAGE}/caddy"
  CADDY_IMAGE_TMP: "${CI_REGISTRY_IMAGE}/caddy:${CI_COMMIT_REF_SLUG}-${CI_COMMIT_SHORT_SHA}"


###################################################################################################################
#
# Build images with a temporary name
#

build_php:
  stage: build
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  script:
    - docker pull $PHP_IMAGE_NAME:latest || true
    - docker pull $PHP_IMAGE_TMP 2> /dev/null || docker build --pull --cache-from $PHP_IMAGE_NAME:latest -t $PHP_IMAGE_TMP --build-arg BUILDKIT_INLINE_CACHE=1 --build-arg CI_COMMIT_REF_NAME=$CI_COMMIT_REF_SLUG --build-arg CI_COMMIT_TAG=$CI_COMMIT_TAG --build-arg CI_COMMIT_SHORT_SHA=$CI_COMMIT_SHORT_SHA .
    - docker push $PHP_IMAGE_TMP
  only:
    - branches
    - tags

build_apache:
  stage: build
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  script:
    - docker pull $APACHE_IMAGE_NAME:latest || true
    - docker pull $APACHE_IMAGE_TMP 2> /dev/null || docker build --file Dockerfile.apache --pull --cache-from $APACHE_IMAGE_NAME:latest --build-arg php_image=$PHP_IMAGE_TMP -t $APACHE_IMAGE_TMP --build-arg BUILDKIT_INLINE_CACHE=1 .
    - docker push $APACHE_IMAGE_TMP
  only:
    - branches
    - tags

build_caddy:
  stage: test
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  script:
    - docker pull $CADDY_IMAGE_NAME:latest || true
    - docker pull $CADDY_IMAGE_TMP 2> /dev/null || docker build --file Dockerfile.caddy --pull --cache-from $CADDY_IMAGE_NAME:latest --build-arg php_image=$PHP_IMAGE_TMP -t $CADDY_IMAGE_TMP --build-arg BUILDKIT_INLINE_CACHE=1 .
    - docker push $CADDY_IMAGE_TMP
  only:
    - branches
    - tags


###################################################################################################################
#
# Push PHP image with defintive name
#

push_php_branch:
  stage: push
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  script:
    - docker pull $PHP_IMAGE_TMP
    - docker tag $PHP_IMAGE_TMP "$PHP_IMAGE_NAME:$CI_COMMIT_REF_SLUG"
    - docker push "$PHP_IMAGE_NAME:$CI_COMMIT_REF_SLUG"
  only:
    - branches
  except:
    - master

push_php_tag:
  stage: push
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  script:
    - docker pull $PHP_IMAGE_TMP
    - docker tag $PHP_IMAGE_TMP "$PHP_IMAGE_NAME:$CI_COMMIT_TAG"
    - docker push "$PHP_IMAGE_NAME:$CI_COMMIT_TAG"
  only:
    - tags

push_php_latest:
  stage: push
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  script:
    - docker pull $PHP_IMAGE_TMP
    - docker tag $PHP_IMAGE_TMP "$PHP_IMAGE_NAME:latest"
    - docker push "$PHP_IMAGE_NAME:latest"
  only:
    - master


###################################################################################################################
#
# Push Apache image with defintive name
#

push_apache_branch:
  stage: push
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  script:
    - docker pull $APACHE_IMAGE_TMP
    - docker tag $APACHE_IMAGE_TMP "$APACHE_IMAGE_NAME:$CI_COMMIT_REF_SLUG"
    - docker push "$APACHE_IMAGE_NAME:$CI_COMMIT_REF_SLUG"
  only:
    - branches
  except:
    - master

push_apache_tag:
  stage: push
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  script:
    - docker pull $APACHE_IMAGE_TMP
    - docker tag $APACHE_IMAGE_TMP "$APACHE_IMAGE_NAME:$CI_COMMIT_TAG"
    - docker push "$APACHE_IMAGE_NAME:$CI_COMMIT_TAG"
  only:
    - tags

push_apache_latest:
  stage: push
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  script:
    - docker pull $APACHE_IMAGE_TMP
    - docker tag $APACHE_IMAGE_TMP "$APACHE_IMAGE_NAME:latest"
    - docker push "$APACHE_IMAGE_NAME:latest"
  only:
    - master

###################################################################################################################
#
# Push CADDY image with defintive name
#

push_caddy_branch:
  stage: push
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  script:
    - docker pull $CADDY_IMAGE_TMP
    - docker tag $CADDY_IMAGE_TMP "$CADDY_IMAGE_NAME:$CI_COMMIT_REF_SLUG"
    - docker push "$CADDY_IMAGE_NAME:$CI_COMMIT_REF_SLUG"
  only:
    - branches
  except:
    - master

push_caddy_tag:
  stage: push
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  script:
    - docker pull $CADDY_IMAGE_TMP
    - docker tag $CADDY_IMAGE_TMP "$CADDY_IMAGE_NAME:$CI_COMMIT_TAG"
    - docker push "$CADDY_IMAGE_NAME:$CI_COMMIT_TAG"
  only:
    - tags

push_caddy_latest:
  stage: push
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  script:
    - docker pull $CADDY_IMAGE_TMP
    - docker tag $CADDY_IMAGE_TMP "$CADDY_IMAGE_NAME:latest"
    - docker push "$CADDY_IMAGE_NAME:latest"
  only:
    - master


renovate:
  stage: renovate
  image: renovate/renovate:slim
  variables:
    RENOVATE_BASE_DIR: $CI_PROJECT_DIR/renovate
    RENOVATE_ENDPOINT: $CI_API_V4_URL
    RENOVATE_PLATFORM: gitlab
    RENOVATE_GIT_AUTHOR: Renovate Bot <bot@renovateapp.com>
    RENOVATE_OPTIMIZE_FOR_DISABLED: "true"
    RENOVATE_REPOSITORY_CACHE: "true"
    RENOVATE_REQUIRE_CONFIG: "true"
    RENOVATE_ONBOARDING: "false"
    RENOVATE_ONBOARDING_CONFIG: '{"$$schema": "https://docs.renovatebot.com/renovate-schema.json", "extends": ["config:base"] }'
    RENOVATE_IGNORE_PR_AUTHOR: "true"
    RENOVATE_TOKEN: $RENOVATE_TOKEN
    RENOVATE_EXTENDS: "github>whitesource/merge-confidence:beta"
    RENOVATE_LOG_FILE: /tmp/renovate-log.json
    RENOVATE_LOG_FILE_LEVEL: debug
    LOG_LEVEL: info
    DOCKER_DRIVER: overlay2
    DOCKER_TLS_CERTDIR: ""
    DOCKER_HOST: tcp://docker:2375
  before_script:
    - cp .gitlab/renovate.json /tmp/renovate.json
  script:
    - export RENOVATE_CONFIG_FILE=/tmp/renovate.json
    - renovate
  cache:
    key: ${CI_COMMIT_REF_SLUG}-renovate
    paths:
      - renovate/cache/renovate/repository/**/*.json
  only:
    - master
  artifacts:
    when: always
    expire_in: 1d



###################################################################################################################
#
# Test jobs
#

#zap_baseline:
#  stage: test
#  allow_failure: true
#  script:
#    - docker run -v $(pwd):/zap/wrk/:rw -t owasp/zap2docker-stable zap-baseline.py -t https://devsdc.opencontent.it/comune-di-bugliano/
#    # -z -config rules.csrf.ignorelist=search,login then ZAP will not fail the scan if forms with an ID of "search" or "login" do not have anti CSRF tokens.
#    # - docker run -t owasp/zap2docker-stable zap-baseline.py -j -t https://10.0.1.22/ # with ajax scanning

publiccode:
  stage: test
  allow_failure: false
  script:
#    - docker run -v $(pwd):/var/tmp:ro -t --rm golang sh -c "go get github.com/italia/publiccode-parser-go/pcvalidate; cd /var/tmp; /go/bin/pcvalidate -remote-base-url https://gitlab.com/opencontent/stanzadelcittadino/raw/master publiccode.yml"
    - docker run -i italia/publiccode-parser-go /dev/stdin < publiccode.yml


php-qa-tools:
  stage: test
  allow_failure: true
  script:
    # commands are executed with a path like: /builds/LzfeuYfm/0/opencontent/stanzadelcittadino
    # to have reports uploaded to gitlab the runners must have /builds path shared
    # ->  https://gitlab.com/gitlab-org/gitlab-foss/-/issues/41227
    - docker run -t --rm -u "$UID" -v "$(pwd):/app" eko3alpha/docker-phpqa --tools phpmetrics,phploc,phpcs,php-cs-fixer,phpmd,pdepend,parallel-lint --report offline --ignoredDirs vendor,build,migrations,test --buildDir /app/reports
  artifacts:
    name: "${CI_JOB_NAME}-${CI_COMMIT_REF_SLUG}"
    paths:
      - reports/*
    when: always

var-dump-check:
  stage: test
  script:
    - docker run -t --rm -v "$(pwd):/app" umutphp/php-docker-images-for-ci:7.3 var-dump-check /app

security_composer_checker:
  stage: test
  image: umutphp/php-docker-images-for-ci:7.3
  script:
    - local-php-security-checker --path=./composer.lock

#dummy_protocol:
#  stage: test
#  allow_failure: true
#  script:
#    - echo "Looking for configuration files containing protocollo.handlers.dummy:"
#    - find app/config -type f -name "config_prod.yml" -exec grep -H protocollo.handlers.dummy {} \;
#    - if [[ $(find app/config -type f -name "config_prod.yml" -exec grep -H protocollo.handlers.dummy {} \; | wc -l) -gt 0 ]]; then echo "Error, at least one production file contains dummy protocol!" && exit 1; else echo "OK, no dummy protocol in production files"; fi

# vim: autoindent tabstop=2 shiftwidth=2 expandtab softtabstop=2 filetype=yaml fileencoding=utf-8
