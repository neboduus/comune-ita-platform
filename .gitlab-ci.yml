image: docker:latest

# build -> push -> delivery
stages:
  - build
  - push
  - test
#  - delivery

variables:
  CONTAINER_TMP_IMAGE: "$CI_REGISTRY_IMAGE:$CI_COMMIT_SHA"
  AWS_REGISTRY: "AWS_ACCOUNT_ID."
  AWS_ECR_IMAGE: "$AWS_REGISTRY/$CI_PROJECT_NAME"
  AWS_ECR_APP_IMAGE: "$AWS_REGISTRY/$CI_PROJECT_NAME/app"
  AWS_ECR_APACHE_IMAGE: "$AWS_REGISTRY/$CI_PROJECT_NAME/apache"
  AWS_REPOSITORY_APP_NAME: "$CI_PROJECT_NAME/app"
  AWS_REPOSITORY_APACHE_NAME: "$CI_PROJECT_NAME/apache"
  FARGATE_DOMAIN: "fargate.opencontent.io"
  LB: fargate-lb
  PORT: http:3000
  NETWORKING: "--security-group-id sg-09623de76fa990898 --subnet-id subnet-0b05fd8af8e3414bf --subnet-id subnet-07a1e55f83f380f87 --subnet-id subnet-0fe7f82bfcc0200b3"

services:
  - docker:dind

common_build:
  stage: build
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  script:
    - docker pull  $CONTAINER_TMP_IMAGE 2> /dev/null || docker build --pull -t $CONTAINER_TMP_IMAGE . #Build docker image
    - docker push  $CONTAINER_TMP_IMAGE
  only:
    - branches
    - tags

push_branches:
  stage: push
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  script:
    - docker pull $CONTAINER_TMP_IMAGE
    - docker tag $CONTAINER_TMP_IMAGE "$CI_REGISTRY_IMAGE:$CI_COMMIT_REF_NAME"      # ...:branch-name
    - docker push "$CI_REGISTRY_IMAGE:$CI_COMMIT_REF_NAME"
  only:
    - branches
  except:
    - master

push_tags:
  stage: push
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  script:
    - docker pull $CONTAINER_TMP_IMAGE
    - docker tag $CONTAINER_TMP_IMAGE "$CI_REGISTRY_IMAGE:$CI_COMMIT_TAG"
    - docker push "$CI_REGISTRY_IMAGE:$CI_COMMIT_TAG"
  only:
    - tags


push_latest:
  stage: push
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  script:
    - docker pull $CONTAINER_TMP_IMAGE
    - docker tag $CONTAINER_TMP_IMAGE "$CI_REGISTRY_IMAGE:latest"
    - docker push "$CI_REGISTRY_IMAGE:latest"
  only:
    - master

push_branches_to_ecr:
  stage: push
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
    - apk add --no-cache python py-pip
    - pip install awscli
    - $(aws ecr get-login --no-include-email | sed 's|https://||')
    - aws ecr describe-repositories --repository-names $CI_PROJECT_NAME 2> /dev/null || aws ecr create-repository --repository-name $CI_PROJECT_NAME
  script:
    - docker pull $CONTAINER_TMP_IMAGE
    - docker tag $CONTAINER_TMP_IMAGE "$AWS_ECR_IMAGE:$CI_COMMIT_REF_NAME"  # ...:branch-name
    - docker push "$AWS_ECR_IMAGE:$CI_COMMIT_REF_NAME"      # ...:branch-name
  only:
    - branches
  except:
    - master

push_tags_to_ecr:
  stage: push
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
    - apk add --no-cache python py-pip
    - pip install awscli
    - $(aws ecr get-login --no-include-email | sed 's|https://||')
    - aws ecr describe-repositories --repository-names $CI_PROJECT_NAME 2> /dev/null || aws ecr create-repository --repository-name $CI_PROJECT_NAME
  script:
    - docker pull $CONTAINER_TMP_IMAGE
    - docker tag $CONTAINER_TMP_IMAGE "$AWS_ECR_IMAGE:$CI_COMMIT_TAG"
    - docker push "$AWS_ECR_IMAGE:$CI_COMMIT_TAG"
  only:
    - tags

push_latest_to_ecr:
  stage: push
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
    - apk add --no-cache python py-pip
    - pip install awscli
    - $(aws ecr get-login --no-include-email | sed 's|https://||')
    - aws ecr describe-repositories --repository-names $CI_PROJECT_NAME 2> /dev/null || aws ecr create-repository --repository-name $CI_PROJECT_NAME
  script:
    - docker pull $CONTAINER_TMP_IMAGE
    - docker tag $CONTAINER_TMP_IMAGE "$AWS_ECR_IMAGE:latest"
    - docker push "$AWS_ECR_IMAGE:latest"
  only:
    - master

zap_baseline:
    stage: test 
    allow_failure: true
    script:
      - docker run -v $(pwd):/zap/wrk/:rw -t owasp/zap2docker-stable zap-baseline.py -t https://devsdc.opencontent.it/comune-di-ala/
     # -z -config rules.csrf.ignorelist=search,login then ZAP will not fail the scan if forms with an ID of "search" or "login" do not have anti CSRF tokens.
     # - docker run -t owasp/zap2docker-stable zap-baseline.py -j -t https://10.0.1.22/ # with ajax scanning

publiccode:
    stage: test
    allow_failure: false
    script:
      - docker run -v $(pwd):/var/tmp:ro -t --rm golang sh -c "go get github.com/italia/publiccode-parser-go/pcvalidate; cd /var/tmp; /go/bin/pcvalidate -remote-base-url https://gitlab.com/opencontent/stanzadelcittadino/raw/master publiccode.yml"


# vim: set noet sw=4 ts=4:        



#deploy_qa:
#  stage: delivery
#  variables:
#    FARGATE_SERVICE: "${CI_PROJECT_NAME}-qa"
#  before_script:
#    - apk add --no-cache curl gzip
#    - curl --silent -L https://github.com/jpignata/fargate/releases/download/v0.3.1/fargate-0.3.1-linux-amd64.zip | gunzip - > fargate
#    - mv -v fargate /usr/local/bin/
#    - chmod +x /usr/local/bin/fargate
#  script:
#    - echo -e "\n==> Fargate will deploy $FARGATE_SERVICE to cluster '${FARGATE_CLUSTER:-fargate}' in region '${AWS_DEFAULT_REGION:-default}' with image $AWS_ECR_IMAGE:latest\n"
#    - fargate service ps ${FARGATE_SERVICE} >/dev/null 2>&1 && fargate service deploy $FARGATE_SERVICE --image $AWS_ECR_IMAGE:latest || fargate service create ${FARGATE_SERVICE} --image ${AWS_ECR_IMAGE}:latest --env NODE_ENV=production --lb $LB --port $PORT --rule host=${FARGATE_SERVICE}.${FARGATE_DOMAIN} ${NETWORKING}
#    - fargate service info $FARGATE_SERVICE
#  only:
#    - master
#
#deploy_production:
#  stage: delivery
#  when: manual
#  variables:
#    FARGATE_SERVICE: "${CI_PROJECT_NAME}"
#  before_script:
#    - apk add --no-cache curl gzip
#    - curl --silent -L https://github.com/jpignata/fargate/releases/download/v0.3.1/fargate-0.3.1-linux-amd64.zip | gunzip - > fargate
#    - mv -v fargate /usr/local/bin/
#    - chmod +x /usr/local/bin/fargate
#  script:
#    - echo -e "\n==> Fargate will deploy $FARGATE_SERVICE to cluster '${FARGATE_CLUSTER:-fargate}' in region '${AWS_DEFAULT_REGION:-default}' with image $AWS_ECR_IMAGE:$CI_COMMIT_TAG\n"
#    - fargate service ps ${FARGATE_SERVICE} >/dev/null 2>&1 && fargate service deploy $FARGATE_SERVICE --image $AWS_ECR_IMAGE:$CI_COMMIT_TAG || fargate service create ${FARGATE_SERVICE} --image ${AWS_ECR_IMAGE}:$CI_COMMIT_TAG --env NODE_ENV=production --lb $LB --port $PORT --rule host=${FARGATE_SERVICE}.${FARGATE_DOMAIN} ${NETWORKING}
#    - fargate service info $FARGATE_SERVICE
#  only:
#    - tags
#
#deploy_branch:
#  stage: delivery
#  when: manual
#  variables:
#    FARGATE_SERVICE: "${CI_PROJECT_NAME}-${CI_COMMIT_REF_NAME}"
#  before_script:
#    - apk add --no-cache curl gzip
#    - curl --silent -L https://github.com/jpignata/fargate/releases/download/v0.3.1/fargate-0.3.1-linux-amd64.zip | gunzip - > fargate
#    - mv -v fargate /usr/local/bin/
#    - chmod +x /usr/local/bin/fargate
#  script:
#    - echo -e "\n==> Fargate will deploy $FARGATE_SERVICE to cluster '${FARGATE_CLUSTER:-fargate}' in region '${AWS_DEFAULT_REGION:-default}' with image $AWS_ECR_IMAGE:$CI_COMMIT_REF_NAME\n"
#    - fargate service ps ${FARGATE_SERVICE} >/dev/null 2>&1 && fargate service deploy $FARGATE_SERVICE --image $AWS_ECR_IMAGE:$CI_COMMIT_REF_NAME || fargate service create ${FARGATE_SERVICE} --image ${AWS_ECR_IMAGE}:$CI_COMMIT_REF_NAME --env NODE_ENV=production --lb $LB --port $PORT --rule host=${FARGATE_SERVICE}.${FARGATE_DOMAIN} ${NETWORKING}
#    - fargate service info $FARGATE_SERVICE
#  only:
#    - branches
#  except:
#    - master
-
